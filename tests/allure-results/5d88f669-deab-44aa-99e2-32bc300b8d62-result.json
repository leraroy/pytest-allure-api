{"name": "test_get_tasks_validate_schema", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.SchemaError: None is not valid under any of the given schemas\n\nFailed validating 'anyOf' in metaschema['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][1]['properties']['items']['$dynamicRef']['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][3]['properties']['type']:\n    {'anyOf': [{'$ref': '#/$defs/simpleTypes'},\n               {'type': 'array',\n                'items': {'$ref': '#/$defs/simpleTypes'},\n                'minItems': 1,\n                'uniqueItems': True}]}\n\nOn schema['properties']['tasks']['items']['properties']['custom_id']['type']:\n    None", "trace": "self = <tests.test_get_tasks.TestGetTasks object at 0x0000016D35E45E50>\n\n    @allure.story(\"Test get tasks has valid schema\")\n    def test_get_tasks_validate_schema(self):\n        with allure.step(\"Check schema is valid\"):\n>           print(self.get_tasks.get_tasks_schema_validate())\n\ntest_get_tasks.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\modules\\GetTasks.py:22: in get_tasks_schema_validate\n    return self.validate_schema(func=self.get_tasks().json(), path=\"get_tasks_schema.json\")\n..\\modules\\base_page.py:74: in validate_schema\n    validate(instance=response, schema=schema)\n..\\venv\\Lib\\site-packages\\jsonschema\\validators.py:1328: in validate\n    cls.check_schema(schema)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncls = <class 'jsonschema.validators.Draft202012Validator'>\nschema = {'properties': {'tasks': {'items': {'properties': {'custom_id': {'type': None}, 'custom_item_id': {'type': 'number'}, 'description': {'type': 'string'}, 'id': {'type': 'string'}, ...}, 'type': 'object'}, 'type': 'array'}}, 'type': 'object'}\nformat_checker = <FormatChecker checkers=['date', 'email', 'idn-email', 'idn-hostname', 'ipv4', 'ipv6', 'regex', 'uuid']>\n\n    @classmethod\n    def check_schema(cls, schema, format_checker=_UNSET):\n        Validator = validator_for(cls.META_SCHEMA, default=cls)\n        if format_checker is _UNSET:\n            format_checker = Validator.FORMAT_CHECKER\n        validator = Validator(\n            schema=cls.META_SCHEMA,\n            format_checker=format_checker,\n        )\n        for error in validator.iter_errors(schema):\n>           raise exceptions.SchemaError.create_from(error)\nE           jsonschema.exceptions.SchemaError: None is not valid under any of the given schemas\nE           \nE           Failed validating 'anyOf' in metaschema['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][1]['properties']['items']['$dynamicRef']['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][3]['properties']['type']:\nE               {'anyOf': [{'$ref': '#/$defs/simpleTypes'},\nE                          {'type': 'array',\nE                           'items': {'$ref': '#/$defs/simpleTypes'},\nE                           'minItems': 1,\nE                           'uniqueItems': True}]}\nE           \nE           On schema['properties']['tasks']['items']['properties']['custom_id']['type']:\nE               None\n\n..\\venv\\Lib\\site-packages\\jsonschema\\validators.py:317: SchemaError"}, "steps": [{"name": "Check schema is valid", "status": "broken", "statusDetails": {"message": "jsonschema.exceptions.SchemaError: None is not valid under any of the given schemas\n\nFailed validating 'anyOf' in metaschema['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][1]['properties']['items']['$dynamicRef']['allOf'][1]['properties']['properties']['additionalProperties']['$dynamicRef']['allOf'][3]['properties']['type']:\n    {'anyOf': [{'$ref': '#/$defs/simpleTypes'},\n               {'type': 'array',\n                'items': {'$ref': '#/$defs/simpleTypes'},\n                'minItems': 1,\n                'uniqueItems': True}]}\n\nOn schema['properties']['tasks']['items']['properties']['custom_id']['type']:\n    None\n", "trace": "  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\tests\\test_get_tasks.py\", line 41, in test_get_tasks_validate_schema\n    print(self.get_tasks.get_tasks_schema_validate())\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\modules\\GetTasks.py\", line 22, in get_tasks_schema_validate\n    return self.validate_schema(func=self.get_tasks().json(), path=\"get_tasks_schema.json\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\modules\\base_page.py\", line 74, in validate_schema\n    validate(instance=response, schema=schema)\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\venv\\Lib\\site-packages\\jsonschema\\validators.py\", line 1328, in validate\n    cls.check_schema(schema)\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\venv\\Lib\\site-packages\\jsonschema\\validators.py\", line 317, in check_schema\n    raise exceptions.SchemaError.create_from(error)\n"}, "steps": [{"name": "Trying to send GET request to /list/901512007029/task", "status": "passed", "start": 1749632414185, "stop": 1749632414796}, {"name": "Trying to send GET request to /list/901512007029/task", "status": "passed", "start": 1749632414800, "stop": 1749632415286}], "start": 1749632414185, "stop": 1749632415294}], "attachments": [{"name": "log", "source": "9e04c88d-7bc6-45dc-8885-23e6ddbe1081-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "5d3183d3-6521-4c93-b817-9564f65dc28b-attachment.txt", "type": "text/plain"}], "start": 1749632414184, "stop": 1749632415300, "uuid": "4473577c-9a99-4315-ba98-f545bf884470", "historyId": "234122eb32bc130c2c7163319e9470b0", "testCaseId": "234122eb32bc130c2c7163319e9470b0", "fullName": "tests.test_get_tasks.TestGetTasks#test_get_tasks_validate_schema", "labels": [{"name": "epic", "value": "Tests Get Tasks"}, {"name": "story", "value": "Test get tasks has valid schema"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_get_tasks"}, {"name": "subSuite", "value": "TestGetTasks"}, {"name": "host", "value": "DESKTOP-HVDQGLK"}, {"name": "thread", "value": "17456-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_get_tasks"}]}