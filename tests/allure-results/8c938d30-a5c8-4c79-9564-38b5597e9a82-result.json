{"name": "test_get_tasks_validate_schema", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 15 column 5 (char 499)", "trace": "self = <tests.test_get_tasks.TestGetTasks object at 0x000001B49B146850>\n\n    @allure.story(\"Test get tasks has valid schema\")\n    def test_get_tasks_validate_schema(self):\n        with allure.step(\"Check schema is valid\"):\n>           print(self.get_tasks.get_tasks_schema_validate())\n\ntest_get_tasks.py:41: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\modules\\GetTasks.py:22: in get_tasks_schema_validate\n    return self.validate_schema(func=self.get_tasks().json(), path=\"get_tasks_schema.json\")\n..\\modules\\base_page.py:69: in validate_schema\n    schema = self.load_schema(path)\n..\\modules\\base_page.py:66: in load_schema\n    return json.load(file)\nD:\\python\\Lib\\json\\__init__.py:293: in load\n    return loads(fp.read(),\nD:\\python\\Lib\\json\\__init__.py:346: in loads\n    return _default_decoder.decode(s)\nD:\\python\\Lib\\json\\decoder.py:337: in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.decoder.JSONDecoder object at 0x000001B497BED350>\ns = '{\\n    \"type\": \"object\",\\n    \"properties\": {\\n        \"tasks\": {\\n            \"type\": \"array\",\\n            \"items\":...content\": {\"type\": \"string\"},\\n                    \"description\": {\"type\": \"string\"},\\n    }\\n}\\n        }\\n    }\\n}\\n'\nidx = 0\n\n    def raw_decode(self, s, idx=0):\n        \"\"\"Decode a JSON document from ``s`` (a ``str`` beginning with\n        a JSON document) and return a 2-tuple of the Python\n        representation and the index in ``s`` where the document ended.\n    \n        This can be used to decode a JSON document from a string that may\n        have extraneous data at the end.\n    \n        \"\"\"\n        try:\n>           obj, end = self.scan_once(s, idx)\nE           json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 15 column 5 (char 499)\n\nD:\\python\\Lib\\json\\decoder.py:353: JSONDecodeError"}, "steps": [{"name": "Check schema is valid", "status": "broken", "statusDetails": {"message": "json.decoder.JSONDecodeError: Expecting property name enclosed in double quotes: line 15 column 5 (char 499)\n", "trace": "  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\tests\\test_get_tasks.py\", line 41, in test_get_tasks_validate_schema\n    print(self.get_tasks.get_tasks_schema_validate())\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\modules\\GetTasks.py\", line 22, in get_tasks_schema_validate\n    return self.validate_schema(func=self.get_tasks().json(), path=\"get_tasks_schema.json\")\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\modules\\base_page.py\", line 69, in validate_schema\n    schema = self.load_schema(path)\n             ^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\r_d_course\\r_d_codes\\CourseWork\\ClickUp\\modules\\base_page.py\", line 66, in load_schema\n    return json.load(file)\n           ^^^^^^^^^^^^^^^\n  File \"D:\\python\\Lib\\json\\__init__.py\", line 293, in load\n    return loads(fp.read(),\n           ^^^^^^^^^^^^^^^^\n  File \"D:\\python\\Lib\\json\\__init__.py\", line 346, in loads\n    return _default_decoder.decode(s)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\python\\Lib\\json\\decoder.py\", line 337, in decode\n    obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"D:\\python\\Lib\\json\\decoder.py\", line 353, in raw_decode\n    obj, end = self.scan_once(s, idx)\n               ^^^^^^^^^^^^^^^^^^^^^^\n"}, "steps": [{"name": "Trying to send GET request to /list/901512007029/task", "status": "passed", "start": 1749632241189, "stop": 1749632242825}, {"name": "Trying to send GET request to /list/901512007029/task", "status": "passed", "start": 1749632242829, "stop": 1749632243294}], "start": 1749632241189, "stop": 1749632243297}], "attachments": [{"name": "log", "source": "1683f2eb-a023-4835-9f30-9b730a5b4dcf-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "982a46c9-d363-45e9-adc4-8ea3a0f0d22b-attachment.txt", "type": "text/plain"}], "start": 1749632241189, "stop": 1749632243304, "uuid": "49b12552-aced-4671-91ed-cf828e54ec0c", "historyId": "234122eb32bc130c2c7163319e9470b0", "testCaseId": "234122eb32bc130c2c7163319e9470b0", "fullName": "tests.test_get_tasks.TestGetTasks#test_get_tasks_validate_schema", "labels": [{"name": "epic", "value": "Tests Get Tasks"}, {"name": "story", "value": "Test get tasks has valid schema"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_get_tasks"}, {"name": "subSuite", "value": "TestGetTasks"}, {"name": "host", "value": "DESKTOP-HVDQGLK"}, {"name": "thread", "value": "16560-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_get_tasks"}]}